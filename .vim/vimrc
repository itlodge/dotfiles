" 去掉vi一致性的Bug
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
set runtimepath^=~/.vim/bundle/ctrlp.vim

call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'pangloss/vim-javascript'
Plugin 'Valloric/YouCompleteMe'
Plugin 'ternjs/tern_for_vim'
Plugin 'scrooloose/syntastic'
Plugin 'digitaltoad/vim-pug'
" Plugin 'Chiel92/vim-autoformat'
" Plugin 'JamshedVesuna/vim-markdown-preview'

call vundle#end()            " required
filetype plugin indent on    " required

" call plug#begin('~/.vim/plugged')
" Plug 'pangloss/vim-javascript'
" call plug#end()

" 配置立即生效
autocmd BufWritePost $MYVIMRC source $MYVIMRC

" ============================================================
" Begin ui

" :E into Explore mode
let g:netrw_liststyle=3

syntax on

"colorscheme shine  " Color scheme in company computer
colorscheme pablo  " Color scheme in my personal computer
"colorscheme delek  " Color scheme in my personal computer
"colorscheme desert  " Color scheme in my personal computer

" Hightlight search and incremtal search(start when type the first character)
set hlsearch
set incsearch

" Show the command I type
set showcmd

" Show line and column number
set ruler 

if exists("+showtabline")
  if !exists("*MyTabLine")
     function MyTabLine()
         let s = ''
         let t = tabpagenr()
         let i = 1
         while i <= tabpagenr('$')
             let buflist = tabpagebuflist(i)
             let winnr = tabpagewinnr(i)
             "let s .= '%' . i . 'T'
             "let s .= (i == t ? '%1*' : '%2*')
             "let s .= ' '
             "let s .= i . ':'
             "let s .= winnr . '/' . tabpagewinnr(i,'$')
             let s .= ' %*'
             let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
             let file = bufname(buflist[winnr - 1])
             let file = fnamemodify(file, ':p:t')
             if file == ''
                 let file = '[No Name]'
             endif
             let s .= file
             let i = i + 1
         endwhile
         let s .= '%T%#TabLineFill#%='
         let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
         return s
     endfunction
  endif
     set stal=2
     set tabline=%!MyTabLine()
     map     <F10>    :tabnext<CR>
     map!    <F10>    <C-O>:tabnext<CR>
     map     <S-F10>  :tabprev<CR>
     map!    <S-F10>  <C-O>:tabprev<CR>

endif 

" Disable swap files
set noswapfile
set backup 
set backupdir=~/tmp,/var/tmp,/tmp 
set backupskip=/tmp/*
set directory=~/tmp,/var/tmp,/tmp 
set writebackup

" End ui
" ============================================================

" ============================================================
" Begin coding

let mapleader=";"

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_javascript_checkers = ['eslint']
"autocmd bufwritepost *.js silent !standard-format -w %
"set autoread

" indent for C/C++, Ruby
set autoindent
set cindent
set smartindent
set shiftwidth=2
set softtabstop=2  " Tab to be two spaces.
set expandtab

" indent for different languages
filetype on
filetype plugin indent on

autocmd FileType java setlocal sw=4 sts=4 et
autocmd BufRead,BufNewFile *.java setl sw=4 sts=4 et
autocmd FileType xml setlocal sw=2 sts=2 et
autocmd BufRead,BufNewFile *.xml setlocal sw=2 sts=2 et

" Move lines up and down
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" Auto change the working directory the same as the current file
set autochdir

" Let Backspace erase normally
set backspace=indent,eol,start

" Folding by indentation, zo(open), zc(close), za(toggle) 
set foldmethod=indent

" The <Esc> key in my keyboard is so small
inoremap jj <Esc>

" New blank line in normal mode
nnoremap <silent> zj o<Esc>
nnoremap <silent> zk O<Esc>

" Next one will center the line.
map n nzz
map N Nzz

" Abbreviations
if !exists("*Eatchar")
  func Eatchar(pat)
    let c = nr2char(getchar(0))
    return (c =~ a:pat) ? '' : c
  endfunc
endif

iab #d #define<c-r>=Eatchar('\s')<cr>
iab #i #include<c-r>=Eatchar('\s')<cr>
iab pu public<c-r>=Eatchar('\s')<cr>
iab pr private<c-r>=Eatchar('\s')<cr>
"iab str struct<c-r>=Eatchar('\s')<cr>
iab cl class<c-r>=Eatchar('\s')<cr>
iab td typedef<c-r>=Eatchar('\s')<cr>
iab ad: android:<c-r>=Eatchar('\s')<cr>
iab xdate <c-r>=strftime("20%y/%m/%d")<cr>

" Now I can use ``sy`` to copy to system clipboard
" and ``sp`` to paste to system clipboard.
nnoremap s "+
vnoremap s "+

" Close html tag
let g:closetag_html_style=1
source ~/.vim/scripts/closetag.vim
imap <C-c> <C-_>
nmap <C-c> <C-_>

" Open files
nnoremap <Leader>f :tab drop 
nnoremap <S-h> gT
nnoremap <S-l> gt

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
" 不要缓存
let g:ctrlp_use_caching = 0
let g:ctrlp_custom_ignore = 'node_modules'

" for markdown
filetype plugin on
set shell=bash\ -i
" End coding
" ============================================================

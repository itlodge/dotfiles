" ============================================================
" Begin ui

syntax on

"colorscheme shine  " Color scheme in company computer
colorscheme pablo  " Color scheme in my personal computer

" Hightlight search and incremtal search(start when type the first character)
set hlsearch
set incsearch

" Show the command I type
set showcmd

" show line and column number
set ruler 

if exists("+showtabline")
     function MyTabLine()
         let s = ''
         let t = tabpagenr()
         let i = 1
         while i <= tabpagenr('$')
             let buflist = tabpagebuflist(i)
             let winnr = tabpagewinnr(i)
             "let s .= '%' . i . 'T'
             "let s .= (i == t ? '%1*' : '%2*')
             "let s .= ' '
             "let s .= i . ':'
             "let s .= winnr . '/' . tabpagewinnr(i,'$')
             let s .= ' %*'
             let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
             let file = bufname(buflist[winnr - 1])
             let file = fnamemodify(file, ':p:t')
             if file == ''
                 let file = '[No Name]'
             endif
             let s .= file
             let i = i + 1
         endwhile
         let s .= '%T%#TabLineFill#%='
         let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
         return s
     endfunction
     set stal=2
     set tabline=%!MyTabLine()
     map     <F10>    :tabnext<CR>
     map!    <F10>    <C-O>:tabnext<CR>
     map     <S-F10>  :tabprev<CR>
     map!    <S-F10>  <C-O>:tabprev<CR>
endif 
" End ui
" ============================================================

" ============================================================
" Begin coding

" indent for C/C++
set autoindent
set cindent
set smartindent
set shiftwidth=2
set softtabstop=2  " Tab to be two spaces.
set expandtab

" indent for different languages
filetype on
filetype plugin indent on

autocmd FileType java setlocal shiftwidth=4 softtabstop=4

" Move lines up and down
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" Auto change the working directory the same as the current file
set autochdir

" Let Backspace erase normally
set backspace=indent,eol,start

" Folding by indentation, zo(open), zc(close), za(toggle) 
set foldmethod=indent

" The <Esc> key in my keyboard is so small
inoremap jj <Esc>

" New blank line in normal mode
nnoremap <silent> zj o<Esc>
nnoremap <silent> zk O<Esc>

" Next one will center the line.
map n nzz
map N Nzz

" edit a file or jump to it if already open
nnoremap <C-x><C-f> :tab drop
nnoremap <S-h> gT
nnoremap <S-l> gt

" Abbreviations
ab #d #define
ab #i #include
ab pu public
ab pr private
ab cl class
ab td typedef

" Now I can use ``sy`` to copy to system clipboard
" and ``sp`` to paste to system clipboard.
nnoremap s "+
vnoremap s "+

" Close html tag
let g:closetag_html_style=1
source ~/.vim/scripts/closetag.vim
imap <C-c> <C-_>
nmap <C-c> <C-_>

" ``once_`` to expand '#ifndef ...'
function! InsertHeaderGuard() 
    let def = '__' . expand('%:r') . '_' . expand('%:e') . '__'
    let def = toupper(def)
    let guard =  '#ifndef ' . def . "\n"
    let guard .= '#define ' . def . "\n\n"
    let guard .= '#endif // ' . def 
    return guard
endfunction

iabbrev once_ <c-r>=InsertHeaderGuard()<cr>

" End coding
" ============================================================
